{"version":3,"sources":["components/ErrorBoundary.js","components/googleMapsConfig.js","components/Foursquare.js","components/Map.js","components/Navbar.js","components/SearchBar.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","id","toString","componentStack","children","React","Component","GoogleMapsAPI","apiKey","center","lat","lng","zoom","FoursquareAPI","credentials","client_id","client_secret","fullVenues","name","location","address","crossStreet","formattedAddress","canonicalUrl","url","bestPhoto","prefix","suffix","width","height","visibility","description","base_url","MapContainer","getOrCreateRef","references","hasOwnProperty","createRef","gm_authFailure","mapElement","document","getElementById","innerHTML","errorDiv","createElement","className","appendChild","getVisibleMarkers","visibleMarkers","markers","mapComponent","filter","marker","isVisible","map","index","arr","animation","setMarkerAnimation","ref","venue","key","position","onClick","onMarkerClick","isOpen","e","handleMarkerClick","google","markerSelected","query","maps","Animation","BOUNCE","length","DROP","buildInfoWindowContent","activeMarker","clickFilterActive","selectedVenue","categories","onClose","handleInfoWindowClose","setInfoWindowMarker","infoWindowMarker","current","googleMapsConfig","window","initialCenter","pixelOffset","Size","visible","join","GoogleApiWrapper","Navbar","href","SearchBar","sanitizeInput","string","trim","toLowerCase","onChange","queryString","target","value","turnTextFilterOn","resetVenue","type","placeholder","Sidebar","updateQuery","filterByClick","resetFilter","role","selectedVenues","SidebarMenu","resetTextFilter","isTextFilterOn","sidebarMenuComponent","renderedList","forEach","push","SidebarItem","resetToggle","isToggleOn","toggleSelection","filterMethod","itemClass","App","getVenues","endpoint","buildUrl","fetch","then","response","json","result","venuesResponse","groups","items","venues","venuesRetrieved","catch","console","renderForusquareError","closeAllMarkers","filterByText","filteredVenues","includes","updateSelectedVenues","resetSelectedVenues","resetVenueByText","selectVenue","filterMarkers","newSelectedVenues","Object","assign","selectClickedMarker","clickedMarkerVenue","Map","updateVisibleMarkers","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c991a660.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        // The state controls the presence and content of errors for each child component\n        this.state = {\n            error: null,\n            errorInfo: null\n        };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Catch errors in any components below and re-render with error message\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        });\n    }\n\n    render() {\n        // If there is an error, return error information\n        if (this.state.errorInfo) {\n            return (\n                <div id=\"errorBoundary\">\n                    <h2>Oops ... something went wrong. :/</h2>\n                    <details>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        // When no error occurs, just render children normally\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","// --------------------------------------------\n// Google Maps API\n// --------------------------------------------\nclass GoogleMaps {\n    constructor() {\n        this.apiKey = \"AIzaSyBNw3PngzPkw0wrlrYPdLAXRZidZNSlrzA\";\n        this.center = {lat: 40.757339, lng: -73.985992};\n        this.zoom = 15;\n    }\n}\n\nlet GoogleMapsAPI = new GoogleMaps();\n\nexport default GoogleMapsAPI;\n","import GoogleMapsAPI from './googleMapsConfig.js'\n\n// --------------------------------------------\n// Foursquare API\n// --------------------------------------------\nclass Foursquare {\n\n  constructor() {\n    this.credentials = {\n        client_id: \"AORGIPFRDB40EEAD0P2RPHOZDIDCMABI3A4WJLLWCQWAVMNW\",\n        client_secret: \"LXDPAK1VCGSFLT2NA1N54AJFNPIFCB3XMXM2ZEBUXDJNLI53\"\n    };\n\n    // ------------------------------------------\n    //\n    // FOR TESTING PURPOSES ONLY\n    //\n    // If Foursquare API quota has exceeded\n    // (return status 429), use this in App.js\n    // getVenues function when fecthing venues\n    //\n    // ------------------------------------------\n    this.fullVenues = [\n        {\n            id: \"49b7ed6df964a52030531fe3\",\n            name: \"Times Square\",\n            location: {\n                address: \"Broadway & 7th Ave\",\n                crossStreet: \"btwn 42nd & 47th St\",\n                lat: 40.757935054802104,\n                lng: -73.9862082207571,\n                formattedAddress: [\n                    \"Broadway & 7th Ave (btwn 42nd & 47th St)\",\n                    \"New York, NY 10036\",\n                    \"United States\"\n                ]\n            },\n            canonicalUrl: \"https://foursquare.com/v/times-square/49b7ed6df964a52030531fe3\",\n            url: \"http://timessquarenyc.org/index.aspx\",\n            bestPhoto: {\n                id: \"525c7abc11d22e7fcc08bc83\",\n                prefix: \"https://fastly.4sqi.net/img/general/\",\n                suffix: \"/476_OEblz_W09ZL0-IhXSyp3MNFoO1Toq_I0NjIX2YRzSGE.jpg\",\n                width: 640,\n                height: 640,\n                visibility: \"public\"\n            }\n        },\n        {\n            id:\"4b135e9bf964a520ad9623e3\",\n            name: \"Madame Tussauds\",\n            location: {\n                address: \"234 W 42nd St\",\n                lat: 40.756432,\n                lng: -73.988828,\n                formattedAddress: [\n                    \"234 W 42nd St (btwn 7th & 8th Ave.)\",\n                    \"New York, NY 10036\",\n                    \"United States\"\n                ]\n            },\n            canonicalUrl: \"https://foursquare.com/v/madame-tussauds/4b135e9bf964a520ad9623e3\",\n            url: \"http://www.madametussauds.com/NewYork\",\n            description: \"Mingle with over 200 wax celebrities in 85,000 sq ft of interactive entertainment located in Times Square!\",\n            bestPhoto: {\n                id: \"50dc6610e4b0b8da13b511c5\",\n                prefix: \"https://fastly.4sqi.net/img/general/\",\n                suffix: \"/40551984_9nTy6_RWB5NM9wyjspp1wRaMmLMcwdfyF4xprVLMiJE.jpg\",\n                width: 720,\n                height: 960,\n                visibility: \"public\"\n            }\n        },\n        {\n            id: \"42829c80f964a5206a221fe3\",\n            name: \"Grand Central Terminal\",\n            location: {\n                address: \"87 E 42nd St\",\n                lat: 40.75272511851483,\n                lng: -73.97736414087431,\n                formattedAddress: [\n                    \"87 E 42nd St (btwn Vanderbilt & Park Ave)\",\n                    \"New York, NY 10017\",\n                    \"United States\"\n                ]\n            },\n            canonicalUrl: \"https://foursquare.com/v/grand-central-terminal/42829c80f964a5206a221fe3\",\n            url: \"https://www.grandcentralterminal.com\",\n            bestPhoto: {\n                id: \"51006d8be4b014ee565396a5\",\n                prefix: \"https://fastly.4sqi.net/img/general/\",\n                suffix: \"/708901_Wp8kf7WMP78cuRIsFtB7ma5FyrdNTAh27sFup40TI54.jpg\",\n                width: 612,\n                height: 612,\n                visibility: \"public\"\n            }\n        },\n        {\n            id: \"43a48f1bf964a520502c1fe3\",\n            name: \"Top of the Rock Observation Deck\",\n            location: {\n                address: \"30 Rockefeller Plz\",\n                lat: 40.759095065214055,\n                lng: -73.97935153748539,\n                formattedAddress: [\n                    \"30 Rockefeller Plz (btwn 5th & 6th Ave)\",\n                    \"New York, NY 10112\",\n                    \"United States\"\n                ]\n            },\n            canonicalUrl: \"https://foursquare.com/v/top-of-the-rock-observation-deck/43a48f1bf964a520502c1fe3\",\n            url: \"http://www.topoftherocknyc.com\",\n            bestPhoto: {\n                id: \"51b74b82498e4ebc45d84fde\",\n                prefix: \"https://fastly.4sqi.net/img/general/\",\n                suffix: \"/113687_9XVInqqhDNjT9X1Zpyk5xk-Vnri1C4f_xfUSgm69zNE.jpg\",\n                width: 612,\n                height: 612,\n                visibility: \"public\"\n            }\n        },\n        {\n            id: \"43695300f964a5208c291fe3\",\n            name: \"Empire State Building\",\n            location: {\n                address: \"350 5th Ave\",\n                lat: 40.7485995507123,\n                lng: -73.98580648682452,\n                formattedAddress: [\n                    \"350 5th Ave (btwn 33rd & 34th St)\",\n                    \"New York, NY 10118\",\n                    \"United States\"\n                ]\n            },\n            canonicalUrl: \"https://foursquare.com/v/empire-state-building/43695300f964a5208c291fe3\",\n            url: \"https://www.esbnyc.com\",\n            description: \"Soaring 1,454 ft. (443 m.) above Manhattan, the Empire State Building is the region's #1 tourist attraction & the heart of New York City. Our 86th & 102nd floor Observatories offer the two highest viewing decks in NYC along with unobstructed 360-degree views. On a clear day, you can see five states!\",\n            bestPhoto: {\n                id: \"51b8f916498e6a8c16a329eb\",\n                prefix: \"https://fastly.4sqi.net/img/general/\",\n                suffix: \"/26739064_mUxQ4CGrobFqwpcAIoX6YoAdH0xCDT4YAxaU6y65PPI.jpg\",\n                width: 612,\n                height: 612,\n                visibility: \"public\"\n            }\n        }\n    ];\n  }\n\n  buildUrl() {\n      // Foursquare base API url\n      const base_url = \"https://api.foursquare.com/v2/venues/explore\";\n      // Foursquare API credentials\n      const client_id = this.credentials.client_id;\n      const client_secret = this.credentials.client_secret;\n      const version = \"&v=20190814\"\n      const referenceLocation = GoogleMapsAPI.center.lat + \",\" + GoogleMapsAPI.center.lng;\n      // If you want to limit your results to 10 results, uncomment the line below\n      // const limit = \"&limit=\" + 10;\n\n      // Build API endpoint\n      const url = (\n          base_url +\n          \"?client_id=\" +\n          client_id +\n          \"&client_secret=\" +\n          client_secret +\n          version\n          +\n          \"&ll=\" +\n          referenceLocation\n          // Uncomment the two lines bellow if you want to add the limit parameter defined above\n          // +\n          // limit\n      );\n\n      return url;\n  }\n}\n\nlet FoursquareAPI = new Foursquare();\n\nexport default FoursquareAPI;\n","import React from 'react'\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport '../App.css';\nimport GoogleMapsAPI from './googleMapsConfig.js';\n\n// --------------------------------------------\n// Map components\n// --------------------------------------------\nexport class MapContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            googleMapsConfig: GoogleMapsAPI\n        };\n\n        this.references = {};\n\n        // Bind window (global) fallback method to component fallback\n        window.gm_authFailure = this.gm_authFailure;\n    }\n\n    // -------------------------------\n    // Refs handling\n    // -------------------------------\n    getOrCreateRef = (id) => {\n        if (!this.references.hasOwnProperty(id)) {\n            this.references[id] = React.createRef();\n        }\n        return this.references[id];\n    }\n\n    // -------------------------------\n    // Error handling\n    // -------------------------------\n    gm_authFailure = () => {\n        let mapElement = document.getElementById(\"map\");\n        mapElement.innerHTML = \"\"\n        let errorDiv = document.createElement('div');\n        errorDiv.className = 'GoogleMaps-error';\n        errorDiv.innerHTML = \"\";\n        errorDiv.innerHTML += '<div id=\"errorBoundary\">';\n        errorDiv.innerHTML += '<h2>Google Maps error</h2>';\n        errorDiv.innerHTML += '<p>Oops! We could load Google Maps :/ Check your API key for any possible errors</p>';\n        mapElement.appendChild(errorDiv);\n    }\n\n    // -------------------------------\n    // Marker methods\n    // -------------------------------\n    getVisibleMarkers = () => {\n        // Get markers and context\n        const markers = this.props.markers;\n        const mapComponent = this;\n\n        // Visible markers array\n        let visibleMarkers;\n\n        // If markers array is loaded, filter visible markers and map them to\n        // visibleMarkers array\n        if(markers) {\n            visibleMarkers = markers\n                                .filter(marker => marker.isVisible)\n                                .map((marker, index, arr) => {\n                                    // Select appropriate animation\n                                    let animation = mapComponent.setMarkerAnimation(marker, arr);\n                                    return(\n                                        <Marker\n                                            ref={mapComponent.getOrCreateRef(marker.venue.id)}\n                                            name={marker.venue.name}\n                                            id={marker.venue.id}\n                                            key={marker.venue.id}\n                                            position={\n                                                {\n                                                    lat: marker.lat,\n                                                    lng: marker.lng\n                                                }\n                                            }\n                                            animation={animation}\n                                            onClick={mapComponent.onMarkerClick}\n                                            venue={marker.venue}\n                                            isOpen= {marker.isOpen} />\n                                    );\n                                });\n        }\n\n        return visibleMarkers;\n    }\n    onMarkerClick = (props, marker, e) => {\n        this.props.handleMarkerClick(marker);\n    }\n    setMarkerAnimation = (marker, arr) => {\n        // Get relevant props\n        const google = this.props.google;\n        const markerSelected = this.props.markerSelected;\n        const query = this.props.query;\n        const markers = this.props.markers;\n\n        // Initially, animation is set to null\n        let animation = null;\n\n        // If a marker is open (selected) it should bounce\n        if(marker.isOpen){\n            animation = google.maps.Animation.BOUNCE;\n        }\n        // If no marker is selected and all markers are visible and no query\n        // is active, the marker should drop (re-enter)\n        else if(!markerSelected && !query && arr.length === markers.length) {\n            animation = google.maps.Animation.DROP;\n        }\n\n        return animation;\n    }\n\n    // -------------------------------\n    // InfoWindow methods\n    // -------------------------------\n    buildInfoWindowContent = () => {\n\n        // Manage Info Window Content\n        let selectedVenue;\n\n        // Check for an active marker or click filter.\n        // If there is no selected marker or location on sidebar,\n        // build a default object (this avoid errors like \"Cannot read property\n        // 'x' of undefined\")\n        if(this.props.activeMarker) {\n            selectedVenue = this.props.activeMarker.venue;\n        }\n        else if(this.props.clickFilterActive) {\n            selectedVenue = this.props.selectedVenue;\n        }\n        else {\n            selectedVenue = {\n                name: \"Default name\",\n                location: {\n                    formattedAddress: [\n                        \"Default\",\n                        \"Address\"\n                    ]\n                },\n                categories: [\n                    {\n                        name: \"Default category\"\n                    }\n                ]\n            };\n        }\n\n        return selectedVenue;\n    }\n    onClose = () => {\n        this.props.handleInfoWindowClose();\n    }\n    setInfoWindowMarker = () => {\n        // Get relevant props\n        const activeMarker = this.props.activeMarker;\n        const clickFilterActive = this.props.clickFilterActive;\n        const selectedVenue = this.props.selectedVenue;\n\n        let infoWindowMarker = null;\n\n        // Check first for the simplest case (activeMarker is not null)\n        if(activeMarker) {\n            infoWindowMarker = activeMarker;\n        }\n        // Then check if click filter is active, which means that there is a selected venue\n        else if(clickFilterActive) {\n            infoWindowMarker = this.references[selectedVenue.id].current[\"marker\"];\n        }\n\n        return infoWindowMarker;\n    }\n\n    render() {\n        // Get relevant props and state\n        const center = this.state.googleMapsConfig.center;\n        const zoom = this.state.googleMapsConfig.zoom;\n        const google = this.props.google;\n\n        // Display all markers filtered (visible) markers\n        let visibleMarkers = this.getVisibleMarkers();\n\n        // Build InfoWindow\n        let selectedVenue = this.buildInfoWindowContent();\n        let infoWindowMarker = this.setInfoWindowMarker();\n\n        return (\n            <div id=\"map\">\n            <Map\n                google={google}\n                initialCenter={center}\n                zoom={zoom}\n                >\n                {visibleMarkers}\n                <InfoWindow\n                    position={\n                        infoWindowMarker\n                        ? infoWindowMarker.position\n                        : null\n                    }\n                    pixelOffset={new google.maps.Size(0,-50)}\n                    visible={this.props.markerSelected}\n                    onClose={this.onClose}>\n                    <div id=\"infoWindow\">\n                        <h3 id=\"venueName\">\n                        {selectedVenue.name}\n                        </h3>\n                        <h5 id=\"address\">\n                        {selectedVenue.location.formattedAddress.join()}\n                        </h5>\n                        <p id=\"description\">\n                            <strong>\n                                Category:\n                            </strong>\n                            {selectedVenue.categories[0].name}\n                        </p>\n                    </div>\n                </InfoWindow>\n            </Map>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (GoogleMapsAPI.apiKey)\n})(MapContainer)\n","import React from 'react'\nimport '../App.css';\n\n// --------------------------------------------\n// Navbar components\n// --------------------------------------------\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <nav className=\"Navbar\">\n                    <a className=\"Navbar-brand\" href=\"/\">Neighborhood Map</a>\n                    <div className=\"Api-attribution\">\n                        Powered by Google Maps and Foursquare API data\n                    </div>\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default Navbar;\n","import React from 'react'\n\nconst SearchBar = props => {\n\n    // -------------------------------\n    // Text input methods\n    // -------------------------------\n    const onQueryChange = (e) => {\n        // Update query string with new query\n        const queryString = sanitizeInput(e.target.value);\n        props.onChange(queryString);\n        // Reset any toggled SidebarItem\n        props.turnTextFilterOn();\n        // Reset selected venue\n        props.resetVenue();\n    }\n    // Sanitize text search\n    const sanitizeInput = (string) => {\n        return string.trim().toLowerCase();\n    }\n\n    return (\n      <div id=\"searchBarDiv\">\n        <input\n          id=\"searchVenue\"\n          onChange={onQueryChange}\n          type=\"text\"\n          placeholder=\"Search a venue\"\n          value={props.queryString} />\n     </div>\n  );\n}\nexport default SearchBar\n","import React from 'react'\nimport SearchBar from './SearchBar.js';\nimport '../App.css';\n\n\n// --------------------------------------------\n// Sidebar components\n// --------------------------------------------\nclass Sidebar extends React.Component {\n\n    // Set a constructor\n    constructor(props) {\n        super(props);\n    }\n\n    // -------------------------------\n    // SearchBar methods\n    // -------------------------------\n    updateQuery = (queryString) => {\n        this.props.updateQuery(queryString);\n    }\n    resetVenue = () => {\n        this.props.resetVenue();\n    }\n\n    // -------------------------------\n    // SidebarItem select methods\n    // -------------------------------\n    filterByClick = (venue) => {\n        this.props.filterByClick(venue);\n    }\n    resetFilter = () => {\n        this.props.resetFilter();\n    }\n\n    render() {\n        return (\n            <nav className=\"Sidebar\" role=\"navigation\">\n                <div id=\"menuToggle\">\n                    {/*\n                    A hidden checkbox is used as click reciever,\n                    so we can use the :checked selector on it\n                    */}\n                    <input id=\"Sidebar-toggle\" type=\"checkbox\" />\n\n                    {/* Menu icon*/}\n                    <span></span>\n                    <span></span>\n                    <span></span>\n\n                    {/* Sidebar is displayed when the menu icon is clicked*/}\n                    <SidebarMenu\n                        selectedVenues={this.props.selectedVenues}\n                        queryString={this.props.queryString}\n                        updateQuery={this.updateQuery}\n                        resetVenue={this.resetVenue}\n                        filterByClick={this.filterByClick}\n                        resetFilter={this.resetFilter}/>\n                </div>\n            </nav>\n        );\n    }\n}\n\nclass SidebarMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state= {\n            isTextFilterOn : false\n        };\n    }\n\n    // -------------------------------\n    // SearchBar methods\n    // -------------------------------\n    updateQuery = (queryString) => {\n        this.props.updateQuery(queryString);\n    }\n    resetVenue = () => {\n        this.props.resetVenue();\n    }\n\n    // -------------------------------\n    // SidebarItem select methods\n    // -------------------------------\n    // Toggle methods\n    resetTextFilter = () => {\n        this.setState({\n          isTextFilterOn: false\n        });\n    }\n    turnTextFilterOn = () => {\n        this.setState({\n          isTextFilterOn: true\n        });\n    }\n\n    // Click filter methods\n    filterByClick = (venue) => {\n        this.props.filterByClick(venue);\n    }\n    resetFilter = () => {\n        this.props.resetFilter();\n        this.resetTextFilter();\n    }\n\n    render() {\n        // Get relevant props and state\n        const isTextFilterOn = this.state.isTextFilterOn;\n        const selectedVenues = this.props.selectedVenues;\n\n        // Store component context\n        const sidebarMenuComponent = this;\n\n        // Elements to be rendered\n        let renderedList = [];\n\n        // Check if there are any selected venues and iterate through array to build list\n        if(selectedVenues) {\n            selectedVenues.forEach(function(venue){\n                renderedList.push(<SidebarItem\n                                    key={venue.id}\n                                    isTextFilterOn={isTextFilterOn}\n                                    venue={venue}\n                                    filterByClick={sidebarMenuComponent.filterByClick}\n                                    resetFilter={sidebarMenuComponent.resetFilter}\n                                    resetTextFilter={sidebarMenuComponent.resetTextFilter}/>);\n            });\n        }\n\n        return (\n            <div id=\"sidebarMenuContainer\">\n                <SearchBar\n                    onChange={this.updateQuery}\n                    queryString={this.props.queryString}\n                    turnTextFilterOn={this.turnTextFilterOn}\n                    resetVenue={this.resetVenue} />\n                <div id=\"sidebarMenu\">\n                    <ul>\n                      {renderedList}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass SidebarItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state= {\n            isToggleOn : false,\n        };\n    }\n\n    // -------------------------------\n    // Toggle methods\n    // -------------------------------\n    resetToggle = () => {\n        this.setState({\n            isToggleOn: false\n        });\n    }\n    toggleSelection = () => {\n        this.setState(state => ({\n          isToggleOn: !state.isToggleOn\n      }), this.filterMethod);\n    }\n\n    // -------------------------------\n    // Filter methods\n    // -------------------------------\n    filterMethod = () => {\n        // Choose appropriate method\n        if(this.state.isToggleOn) {\n            this.filterByClick();\n        } else {\n            this.resetFilter();\n        }\n        // Signal that venues are being filtered by selection, not by text\n        this.props.resetTextFilter();\n    }\n    filterByClick = () => {\n        this.props.filterByClick(this.props.venue);\n    }\n    resetFilter= () => {\n        this.props.resetFilter();\n    }\n\n    render() {\n        // Get props\n        const key = this.props.venue.id;\n        const name = this.props.venue.name;\n        const isTextFilterOn = this.props.isTextFilterOn;\n\n        // Build CSS class and method\n        var itemClass = \"Sidebar-item\";\n\n        // Manage CSS on filter state\n        if(!isTextFilterOn) {\n            if(this.state.isToggleOn) {\n                itemClass += \" Highlight\";\n            }\n        }\n\n        return (\n            <li id={key} className={itemClass} onClick={this.toggleSelection}>{name}</li>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport './App.css';\nimport ErrorBoundary from './components/ErrorBoundary.js';\nimport FoursquareAPI from './components/Foursquare.js';\nimport MapContainer from './components/Map.js';\nimport Navbar from './components/Navbar.js';\nimport Sidebar from './components/Sidebar.js';\n\n\n// --------------------------------------------\n// App (main) component\n// --------------------------------------------\nclass App extends React.Component {\n\n    // Set a constructor with state variables that control children components\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeMarker: null,\n            clickFilterActive: false,\n            markers: [],\n            markerSelected: false,\n            query: '',\n            selectedVenue: null,\n            selectedVenues: [],\n            venues: []\n        };\n    }\n\n    // ------------------------------------------\n    // Lifecycle methods\n    // ------------------------------------------\n    // Required for AJAX request\n    componentDidMount() {\n        this.getVenues();\n    }\n\n    // ------------------------------------------\n    // Venue retrieval methods\n    // ------------------------------------------\n    // Get venues using the Foursquare API\n    getVenues = () => {\n        // Build API endpoint\n        const endpoint = FoursquareAPI.buildUrl();\n\n        // Fetch all venues using Foursquare API and add to array\n        fetch(endpoint)\n            .then(response => response.json())\n            .then(result => {\n                let venuesResponse = result.response.groups[0].items;\n                let venues = [];\n\n                // Build \"sanitized\" venues array\n                venuesResponse.forEach(function(venue){\n                    venues.push(venue.venue);\n                });\n\n                // Build markers array\n                let markers = venues.map(venue => {\n                    return {\n                      lat: venue.location.lat,\n                      lng: venue.location.lng,\n                      isOpen: false,\n                      isVisible: true,\n                      id: venue.id,\n                      venue: venue\n                    };\n                });\n\n                // Update state\n                this.setState({\n                    venues: venues,\n                    venuesRetrieved: true,\n                    selectedVenues: venues,\n                    markers: markers\n                });\n            })\n            .catch(error => {\n                console.error('Failed retrieving information', error);\n                this.renderForusquareError();\n            });\n    }\n\n    renderForusquareError = () => {\n        let mapElement = document.getElementById(\"map\");\n        mapElement.innerHTML = \"\"\n        let errorDiv = document.createElement('div');\n        errorDiv.className = 'GoogleMaps-error';\n        errorDiv.innerHTML = \"\";\n        errorDiv.innerHTML += '<div id=\"errorBoundary\">';\n        errorDiv.innerHTML += '<h2>Foursquare error</h2>';\n        errorDiv.innerHTML += '<p>Oops! We could load Foursquare locations :/ Check your API key for any possible errors</p>';\n        mapElement.appendChild(errorDiv);\n    }\n\n\n    // ------------------------------------------\n    // Filter methods\n    // ------------------------------------------\n    // SearchBar\n    updateQuery = (queryString) => {\n        this.setState({\n            query: queryString,\n            markerSelected: false\n        }, function(){\n            this.closeAllMarkers();\n            this.filterByText();\n        });\n    }\n    filterByText = () => {\n        // Array for filtered venues\n        let filteredVenues = [];\n        let query = this.state.query;\n\n        // If query string is not empty, search all venues for matches\n        if(query) {\n            this.state.venues.forEach(function(venue){\n                if(venue.name.toLowerCase().includes(query)){\n                    filteredVenues.push(venue);\n                }\n            });\n            this.updateSelectedVenues(filteredVenues);\n        }\n         // When query string is empty, simply reset selection to include all venues\n        else {\n            this.resetSelectedVenues();\n        }\n    }\n    resetVenueByText = () => {\n        this.setState({\n            markerSelected: false,\n            clickFilterActive: false\n        });\n    }\n\n    // SidebarItem select methods\n    filterByClick = (venue) => {\n        // Close markers\n        this.closeAllMarkers();\n\n        // Select clicked venue\n        this.selectVenue(venue);\n    }\n    resetFilter = () => {\n        this.setState({\n            activeMarker: null,\n            markerSelected: false,\n            clickFilterActive: false\n        });\n        // Update query string and clear sidebar filter\n        this.updateQuery('');\n    }\n\n    // ------------------------------------------\n    // Venue selection methods\n    // ------------------------------------------\n    resetSelectedVenues = () => {\n        this.setState({\n            selectedVenues: this.state.venues\n        }, this.filterMarkers);\n    }\n    updateSelectedVenues = (newSelectedVenues) => {\n        this.setState({\n            selectedVenues: newSelectedVenues\n        }, this.filterMarkers);\n    }\n    selectVenue = (venue) => {\n        // Loop through markers array to find which marker is selected in sidebar\n        const markers = this.state.markers.map(marker => {\n            if(marker.venue === venue){\n                marker.isOpen = true;\n            } else {\n                marker.isOpen = false;\n            }\n            return marker;\n        });\n        // Update state, triggering a filter\n        // In this case we don't call updateQuery because it closes all markers\n        this.setState({\n            activeMarker: null,\n            clickFilterActive: true,\n            markers: Object.assign(this.state.markers, markers),\n            markerSelected: true,\n            query: venue.name.trim().toLowerCase(),\n            selectedVenue: venue\n        }, this.filterByText);\n    }\n\n    // ------------------------------------------\n    // Map methods\n    // ------------------------------------------\n    // Marker methods\n    filterMarkers = () => {\n        // Get relevant state\n        let selectedVenues = this.state.selectedVenues;\n\n        const markers = this.state.markers.map(marker => {\n            if(selectedVenues.includes(marker.venue)){\n                marker.isVisible = true;\n            } else {\n                marker.isVisible = false;\n            }\n            return marker;\n        });\n        this.setState({\n            markers: Object.assign(this.state.markers, markers)\n        });\n    }\n    closeAllMarkers = () => {\n        const markers = this.state.markers.map(marker => {\n            marker.isOpen = false;\n            return marker;\n        });\n        this.setState({\n            markers: Object.assign(this.state.markers, markers),\n            markerSelected: false\n        });\n    };\n    handleMarkerClick = (marker) => {\n        let activeMarker = null;\n\n        // Check marker state and toggle activeMarker accordingly\n        if(!marker.isOpen) {\n            activeMarker = marker;\n        }\n\n        // Turn on selected state\n        this.setState({\n            activeMarker: activeMarker\n        });\n\n        // Select marker on map\n        this.selectClickedMarker(marker.venue);\n    }\n    selectClickedMarker = (clickedMarkerVenue) => {\n        // Auxiliar variable\n        let markerSelected = false;\n\n        // Loop through all markers to see which one is open\n        const markers = this.state.markers.map(marker => {\n            if(marker.venue === clickedMarkerVenue){\n                if(marker.isOpen){\n                    marker.isOpen = false;\n                } else {\n                    marker.isOpen = true;\n                    markerSelected = true;\n                }\n            } else {\n                marker.isOpen = false;\n            }\n            return marker;\n        });\n        // Update markers on state\n        this.setState({\n            markers: Object.assign(this.state.markers, markers),\n            markerSelected: markerSelected\n        });\n    }\n\n    // InfoWindow methods\n    handleInfoWindowClose = () => {\n        this.closeAllMarkers();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ErrorBoundary>\n                    <Navbar />\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <Sidebar\n                        selectedVenues={this.state.selectedVenues}\n                        queryString={this.state.query}\n                        updateQuery={this.updateQuery}\n                        resetVenue={this.resetVenueByText}\n                        filterByClick={this.filterByClick}\n                        resetFilter={this.resetFilter}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <MapContainer\n                        activeMarker={this.state.activeMarker}\n                        clickFilterActive={this.state.clickFilterActive}\n                        markers={this.state.markers}\n                        markerSelected={this.state.markerSelected}\n                        query={this.state.query}\n                        selectedVenue={this.state.selectedVenue}\n                        handleMarkerClick={this.handleMarkerClick}\n                        handleInfoWindowClose={this.handleInfoWindowClose}\n                        updateVisibleMarkers={this.updateVisibleMarkers}/>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}